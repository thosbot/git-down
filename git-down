#!/usr/bin/env bash

blue='\033[1;34m'
green='\033[1;32m'
nc='\033[0m'

it='\033[3m'
ni='\033[23m'

main() {
    validate_env
    root=$(determine_root "$@")
    show_status
    show_log "$root"
    show_stash
}

validate_env() {
    if ! command -v git >/dev/null 2>&1; then
        echo "fatal: git is not installed" >&2
        exit 1
    fi

    if ! git rev-parse --is-inside-work-tree >/dev/null; then
        echo "fatal: not in working tree" >&2
        exit 1
    fi

    if ! git rev-parse --verify HEAD >/dev/null 2>&1; then
        echo "fatal: no revisions found" >&2
        exit 1
    fi
}

determine_root() {
    local root=""

    # Check for user-provided root branch
    if [[ $# -gt 0 && -n "$1" ]]; then
        root="$1"
    fi

    # Otherwise, look for configured root
    if [[ -z "$root" ]]; then
        root=$(git config --get down.root)
    fi
    if [[ -z "$root" ]]; then
        root=$(git config --get init.defaultBranch)
    fi

    # Verify root if it exists
    if [[ -n "$root" ]] && git rev-parse --verify --quiet "$root" >/dev/null 2>&1; then
        echo "$root"
        return
    fi

    # Otherwise, auto-detect root
    mapfile -t remotes < <(git remote)
    count=${#remotes[@]}

    if (( $count == 0 )); then
        root=$(git rev-parse --abbrev-ref HEAD) # Use current branch

    elif (( $count == 1 )); then
        remote="${remotes[0]}"
        root=$(git symbolic-ref "refs/remotes/$remote/HEAD" 2>/dev/null | sed 's|.*/||')

    elif (( $count > 1 )); then
        echo "fatal: can't determine root branch" >&2
        exit 1
    fi

    if [[ -z "$root" ]] || ! git rev-parse --verify --quiet "$root" >/dev/null 2>&1; then
        echo "fatal: invalid root branch" >&2
        exit 1
    fi

    echo "$root"
}

show_status() {
    echo -e "${blue}STATUS${nc}"
    git status
}

show_log() {
    local root="$1"
    curr_branch=$(git branch --show-current)
    if [[ "$curr_branch" != "$root" ]]; then
        # List commits in the current branch that aren't yet in root
        echo -e "\n${blue}COMMITS${nc}"
        log=$(git log --color --no-merges --pretty='%C(yellow)%h%d %Creset%an %Cgreen%ah%Creset %s' --graph "${root}"..)
        if [[ -z "$log" ]]; then
            echo -e "${it}No commits so far in ${green}${curr_branch}${nc}${ni}"
        else
            echo -e "$log"
        fi
    else
        # Otherwise, show repo history
        echo -e "\n${blue}HISTORY${nc}"
        log=$(git log -n 10 --no-merges --format="%cd %h %<(16,trunc)%aN %<(64,trunc)%s" --date=format:"[%m-%d %H:%M]" 2>/dev/null)
        if [[ -z "$log" ]]; then
            echo -e "${it}No history to show${ni}"
        else
            echo -e "$log"
        fi
    fi
}

show_stash() {
    echo -e "\n${blue}STASH${nc}"
    stash="$(git stash list)"
    if [[ -z "$stash" ]]; then
        echo -e "${it}Stash is empty${ni}"
    else
        echo -e "$stash"
    fi
}

main "$@"; exit
